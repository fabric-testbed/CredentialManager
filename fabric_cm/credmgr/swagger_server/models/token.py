# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from fabric_cm.credmgr.swagger_server.models.base_model_ import Model
from fabric_cm.credmgr.swagger_server import util


class Token(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id_token: str=None, refresh_token: str=None, created_at: str=None):  # noqa: E501
        """Token - a model defined in Swagger

        :param id_token: The id_token of this Token.  # noqa: E501
        :type id_token: str
        :param refresh_token: The refresh_token of this Token.  # noqa: E501
        :type refresh_token: str
        :param created_at: The created_at of this Token.  # noqa: E501
        :type created_at: str
        """
        self.swagger_types = {
            'id_token': str,
            'refresh_token': str,
            'created_at': str
        }

        self.attribute_map = {
            'id_token': 'id_token',
            'refresh_token': 'refresh_token',
            'created_at': 'created_at'
        }
        self._id_token = id_token
        self._refresh_token = refresh_token
        self._created_at = created_at

    @classmethod
    def from_dict(cls, dikt) -> 'Token':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The token of this Token.  # noqa: E501
        :rtype: Token
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id_token(self) -> str:
        """Gets the id_token of this Token.

        Identity Token  # noqa: E501

        :return: The id_token of this Token.
        :rtype: str
        """
        return self._id_token

    @id_token.setter
    def id_token(self, id_token: str):
        """Sets the id_token of this Token.

        Identity Token  # noqa: E501

        :param id_token: The id_token of this Token.
        :type id_token: str
        """
        if id_token is None:
            raise ValueError("Invalid value for `id_token`, must not be `None`")  # noqa: E501

        self._id_token = id_token

    @property
    def refresh_token(self) -> str:
        """Gets the refresh_token of this Token.

        Refresh Token  # noqa: E501

        :return: The refresh_token of this Token.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token: str):
        """Sets the refresh_token of this Token.

        Refresh Token  # noqa: E501

        :param refresh_token: The refresh_token of this Token.
        :type refresh_token: str
        """
        if refresh_token is None:
            raise ValueError("Invalid value for `refresh_token`, must not be `None`")  # noqa: E501

        self._refresh_token = refresh_token

    @property
    def created_at(self) -> str:
        """Gets the created_at of this Token.


        :return: The created_at of this Token.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: str):
        """Sets the created_at of this Token.


        :param created_at: The created_at of this Token.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at
