# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from credmgr.swagger_server.models.base_model_ import Model
from credmgr.swagger_server import util


class CredMgrResponseValue(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, user_id: str=None, id_token: str=None, refresh_token: str=None):  # noqa: E501
        """CredMgrResponseValue - a model defined in Swagger

        :param user_id: The user_id of this CredMgrResponseValue.  # noqa: E501
        :type user_id: str
        :param id_token: The id_token of this CredMgrResponseValue.  # noqa: E501
        :type id_token: str
        :param refresh_token: The refresh_token of this CredMgrResponseValue.  # noqa: E501
        :type refresh_token: str
        """
        self.swagger_types = {
            'user_id': str,
            'id_token': str,
            'refresh_token': str
        }

        self.attribute_map = {
            'user_id': 'user_id',
            'id_token': 'id_token',
            'refresh_token': 'refresh_token'
        }
        self._user_id = user_id
        self._id_token = id_token
        self._refresh_token = refresh_token

    @classmethod
    def from_dict(cls, dikt) -> 'CredMgrResponseValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The credMgrResponse_value of this CredMgrResponseValue.  # noqa: E501
        :rtype: CredMgrResponseValue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self) -> str:
        """Gets the user_id of this CredMgrResponseValue.

        Unique id to identify the user to which token was issued  # noqa: E501

        :return: The user_id of this CredMgrResponseValue.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this CredMgrResponseValue.

        Unique id to identify the user to which token was issued  # noqa: E501

        :param user_id: The user_id of this CredMgrResponseValue.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def id_token(self) -> str:
        """Gets the id_token of this CredMgrResponseValue.

        Identity Token  # noqa: E501

        :return: The id_token of this CredMgrResponseValue.
        :rtype: str
        """
        return self._id_token

    @id_token.setter
    def id_token(self, id_token: str):
        """Sets the id_token of this CredMgrResponseValue.

        Identity Token  # noqa: E501

        :param id_token: The id_token of this CredMgrResponseValue.
        :type id_token: str
        """
        if id_token is None:
            raise ValueError("Invalid value for `id_token`, must not be `None`")  # noqa: E501

        self._id_token = id_token

    @property
    def refresh_token(self) -> str:
        """Gets the refresh_token of this CredMgrResponseValue.

        Refresh Token  # noqa: E501

        :return: The refresh_token of this CredMgrResponseValue.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token: str):
        """Sets the refresh_token of this CredMgrResponseValue.

        Refresh Token  # noqa: E501

        :param refresh_token: The refresh_token of this CredMgrResponseValue.
        :type refresh_token: str
        """
        if refresh_token is None:
            raise ValueError("Invalid value for `refresh_token`, must not be `None`")  # noqa: E501

        self._refresh_token = refresh_token
