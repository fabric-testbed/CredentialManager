#!/usr/bin/env python3
from credmgr.CredentialManagers.OAuthCredmgr import OAuthCredmgr
from credmgr.utils import *
import signal
import sys
from functools import partial
from threading import Event
from optparse import OptionParser
import logging

parser = OptionParser()
parser.add_option('-c', '--cred-dir', action='store', type='string', dest='cred_dir',
              help='Path to credential directory')
parser.add_option('-l', '--log-file', action='store', type='string',
              dest='log_file', help='Path to log file')
parser.add_option('-d', '--debug', action='store_const', dest='log_level',
              const=logging.DEBUG, default=logging.INFO,
              help='Set log level to DEBUG')

parser.add_option('-o', '--operation', action='store', type='string', dest='operation',
              help='Specify the operation to be performed (generate/refresh/scan) tokens')

parser.add_option('-u', '--user', action='store', type='string', dest='user',
              help='Specify the user for which token is requested or needs to be refreshed')

sleeper = Event()


def signal_handler(self, logger, signum, frame):
    """
    Catch signals. Use SIGHUP as a sleep interrupt.
    Any other signals should exit the program.
    """
    if signum == signal.SIGHUP:
        logger.info('Got SIGHUP: Triggering READ of Credential Directory')
        self.sleeper.set()
        return
    exit_msg = 'Got signal {0} at frame {1} terminating.'
    logger.info(exit_msg.format(signum, frame))
    sys.exit(0)


def main():
    try:
        (options, args) = parser.parse_args()

        cred_dir = get_cred_dir(cred_dir = options.cred_dir)
        logger = setup_logging(log_path = options.log_file, log_level = options.log_level)
        logger.info('Starting credmgr and registering signals')

        # catch signals
        signal.signal(signal.SIGHUP, partial(signal_handler, logger))
        signal.signal(signal.SIGTERM, partial(signal_handler, logger))
        signal.signal(signal.SIGINT, partial(signal_handler, logger))
        signal.signal(signal.SIGQUIT, partial(signal_handler, logger))
        drop_pid(cred_dir)

        credmgr_incomplete(cred_dir)

        cred_mgr = OAuthCredmgr(cred_dir)

        # set up scan tokens loop
        while True:
            try:
                cred_mgr.scan_tokens()
            except Exception as e:
                logger.exception(e)
            credmgr_complete(cred_dir)
            logger.info('Sleeping for 60 seconds')
            sleeper.clear()
            sleeper.wait(60)

    except Exception as e:
        print(str(e))
        credmgr_complete(cred_dir)
        sys.exit(-1)

if __name__ == '__main__':
    main()