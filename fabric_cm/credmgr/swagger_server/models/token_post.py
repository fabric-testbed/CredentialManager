# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from fabric_cm.credmgr.swagger_server.models.base_model_ import Model
from fabric_cm.credmgr.swagger_server import util


class TokenPost(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: str=None, token: str=None):  # noqa: E501
        """TokenPost - a model defined in Swagger

        :param type: The type of this TokenPost.  # noqa: E501
        :type type: str
        :param token: The token of this TokenPost.  # noqa: E501
        :type token: str
        """
        self.swagger_types = {
            'type': str,
            'token': str
        }

        self.attribute_map = {
            'type': 'type',
            'token': 'token'
        }
        self._type = type
        self._token = token

    @classmethod
    def from_dict(cls, dikt) -> 'TokenPost':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The token_post of this TokenPost.  # noqa: E501
        :rtype: TokenPost
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this TokenPost.

        Token Type  # noqa: E501

        :return: The type of this TokenPost.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this TokenPost.

        Token Type  # noqa: E501

        :param type: The type of this TokenPost.
        :type type: str
        """
        allowed_values = ["identity", "refresh"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def token(self) -> str:
        """Gets the token of this TokenPost.

        Refresh Token or Token Hash  # noqa: E501

        :return: The token of this TokenPost.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token: str):
        """Sets the token of this TokenPost.

        Refresh Token or Token Hash  # noqa: E501

        :param token: The token of this TokenPost.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token
